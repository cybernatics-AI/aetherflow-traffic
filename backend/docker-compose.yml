version: '3.8'

services:
  # AetherFlow Backend API
  aetherflow-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: aetherflow-api
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://aetherflow:aetherflow_password@postgres:5432/aetherflow_db
      - HEDERA_NETWORK=testnet
      - HEDERA_ACCOUNT_ID=0.0.123456
      - HEDERA_PRIVATE_KEY=your_private_key_here
      - LOG_LEVEL=INFO
      - ENVIRONMENT=development
    volumes:
      - ./src:/app/src
      - ./scripts:/app/scripts
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - aetherflow-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: aetherflow-postgres
    environment:
      - POSTGRES_DB=aetherflow_db
      - POSTGRES_USER=aetherflow
      - POSTGRES_PASSWORD=aetherflow_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - aetherflow-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aetherflow -d aetherflow_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: aetherflow-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - aetherflow-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: aetherflow-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - aetherflow-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: aetherflow-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - aetherflow-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: aetherflow-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - aetherflow-api
    networks:
      - aetherflow-network
    restart: unless-stopped

  # Background Task Worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: aetherflow-worker
    environment:
      - DATABASE_URL=postgresql://aetherflow:aetherflow_password@postgres:5432/aetherflow_db
      - REDIS_URL=redis://redis:6379/0
      - HEDERA_NETWORK=testnet
      - LOG_LEVEL=INFO
      - WORKER_MODE=true
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - aetherflow-network
    restart: unless-stopped
    command: ["python", "scripts/background_worker.py"]

  # Database Migration Service
  migration:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: aetherflow-migration
    environment:
      - DATABASE_URL=postgresql://aetherflow:aetherflow_password@postgres:5432/aetherflow_db
    volumes:
      - ./alembic:/app/alembic
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - aetherflow-network
    command: ["python", "scripts/setup_database.py", "--create", "--seed"]
    restart: "no"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  aetherflow-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
